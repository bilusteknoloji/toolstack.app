name: Deploy Toolstack Apps

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose deployment mode"
        required: true
        default: 'build_and_deploy'
        type: choice
        options:
          - build_and_deploy
          - deploy_only

jobs:
  build-image:
    runs-on: ubuntu-24.04
    if: github.event.inputs.mode == 'build_and_deploy'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Build Date and Tag
        run: |
          echo "BUILD_DATE=$(date)" >> $GITHUB_ENV
          echo "BUILD_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push to GitHub Container Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ghcr.io/${{ github.repository }}/toolstack.app:latest
          build-args: |
            BUILD_SHA=${{ env.BUILD_SHA }}
            BUILD_DATE=${{ env.BUILD_DATE }}

  deploy-to-portainer:
    runs-on: ubuntu-24.04
    needs: build-image
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Deploy Date
        id: deploy_date
        run: |
          echo "deploy_date=$(date -u --date='3 hours' '+%Y-%m-%d %H:%M:%S UTC+3')" >> $GITHUB_OUTPUT

      - name: Read Stack YAML
        id: stack_yaml
        run: |
          stack_content=$(base64 -w0 stacks/toolstack.yml)
          echo "stack_content=$stack_content" >> $GITHUB_OUTPUT

      - name: Update Stack in Portainer
        run: |
          STACK_CONTENT="$(echo '${{ steps.stack_yaml.outputs.stack_content }}' | base64 -d)"
          DEPLOY_DATE="${{ steps.deploy_date.outputs.deploy_date }}"

          curl -X PUT "${{ secrets.PORTAINER_URL }}/api/stacks/${{ secrets.PORTAINER_TOOLSTACK_STACK_ID }}?endpointId=${{ secrets.PORTAINER_ENDPOINT_ID }}" \
               -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
               -H "X-GitHub-Action: ${{ secrets.PORTAINER_PASSPORT }}" \
               -H "Content-Type: application/json" \
               --data-raw "$(jq -n \
                   --arg envVar "$DEPLOY_DATE" \
                   --arg stackContent "$STACK_CONTENT" '{
                     env: [{ "name": "LAST_DEPLOY", "value": $envVar }],
                     prune: true,
                     pullImage: true,
                     stackFileContent: $stackContent
                   }')"
